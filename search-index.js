var N=null,E="",T="t",U="u",searchIndex={};
var R=["option","result","try_from","try_into","borrow_mut","borrow","type_id","typeid","formatter","VolatileItemKind","TestGenerator"];

searchIndex["ctest"]={"doc":"ctest - an FFI binding validator","i":[[3,R[10],"ctest","A builder used to generate a test suite.",N,N],[4,"Lang",E,"Programming language",N,N],[13,"C",E,"The C programming language.",0,N],[13,"CXX",E,"The C++ programming language.",0,N],[4,R[9],E,"A kind of item to which the C volatile qualifier could…",N,N],[13,"StructField",E,"A struct field (struct_name, field_name)",1,N],[13,"Static",E,"An extern static",1,N],[13,"FunctionArg",E,"N-th function argument",1,N],[13,"FunctionRet",E,"Function return type",1,N],[11,"new",E,"Creates a new blank test generator.",2,[[],["self"]]],[11,"header",E,"Add a header to be included as part of the generated C file.",2,[[["self"],["str"]],["self"]]],[11,"rust_version",E,"Target Rust version: `major`.`minor`.`patch`",2,[[["self"],["u64"]],["self"]]],[11,"include",E,"Add a path to the C compiler header lookup path.",2,[[["self"],["asref",["path"]],["path"]],["self"]]],[11,"language",E,"Sets the programming language.",2,[[["self"],["lang"]],["self"]]],[11,"flag",E,"Add a flag to the C compiler invocation.",2,[[["self"],["str"]],["self"]]],[11,"out_dir",E,"Configures the output directory of the generated Rust and…",2,[[["self"],["asref",["path"]],["path"]],["self"]]],[11,"target",E,"Configures the target to compile C code for.",2,[[["self"],["str"]],["self"]]],[11,"define",E,"Set a `-D` flag for the C compiler being called.",2,[[["self"],[R[0],["str"]],["str"]],["self"]]],[11,"cfg",E,"Set a `--cfg` option with which to expand the Rust FFI…",2,[[["self"],[R[0],["str"]],["str"]],["self"]]],[11,"verbose_skip",E,"Skipped item names are printed to `stderr` if `v` is `true`.",2,[[["self"],["bool"]],["self"]]],[11,"type_name",E,"Configures how a Rust type name is translated to a C type…",2,[[["self"],["f"]],["self"]]],[11,"field_name",E,"Configures how a Rust struct field is translated to a C…",2,[[["self"],["f"]],["self"]]],[11,"volatile_item",E,"Is volatile?",2,[[["self"],["f"]],["self"]]],[11,"array_arg",E,"Is argument of function an array?",2,[[["self"],["f"]],["self"]]],[11,"const_cname",E,"Configures how Rust `const`s names are translated to C.",2,[[["self"],["f"]],["self"]]],[11,"skip_field",E,"Configures whether all tests for a field are skipped or not.",2,[[["self"],["f"]],["self"]]],[11,"skip_field_type",E,"Configures whether tests for the type of a field is…",2,[[["self"],["f"]],["self"]]],[11,"skip_signededness",E,"Configures whether a types signededness is tested or not.",2,[[["self"],["f"]],["self"]]],[11,"skip_fn",E,"Configures whether tests for a function definition are…",2,[[["self"],["f"]],["self"]]],[11,"skip_static",E,"Configures whether tests for a static definition are…",2,[[["self"],["f"]],["self"]]],[11,"skip_fn_ptrcheck",E,"Configures whether tests for a function pointer's value…",2,[[["self"],["f"]],["self"]]],[11,"skip_const",E,"Configures whether the tests for a constant's value are…",2,[[["self"],["f"]],["self"]]],[11,"skip_type",E,"Configures whether the tests for a typedef are emitted.",2,[[["self"],["f"]],["self"]]],[11,"skip_struct",E,"Configures whether the tests for a struct are emitted.",2,[[["self"],["f"]],["self"]]],[11,"fn_cname",E,"Configures the name of a function in the generate C code.",2,[[["self"],["f"]],["self"]]],[11,"generate",E,"Generate all tests.",2,[[["self"],["asref",["path"]],["path"],["str"]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[2],E,E,2,[[[U]],[R[1]]]],[11,R[3],E,E,2,[[],[R[1]]]],[11,R[4],E,E,2,[[["self"]],[T]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[R[7]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[2],E,E,0,[[[U]],[R[1]]]],[11,R[3],E,E,0,[[],[R[1]]]],[11,R[4],E,E,0,[[["self"]],[T]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[R[7]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[2],E,E,1,[[[U]],[R[1]]]],[11,R[3],E,E,1,[[],[R[1]]]],[11,R[4],E,E,1,[[["self"]],[T]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[R[7]]]],[11,"default",E,E,2,[[],["self"]]],[11,"fmt",E,E,0,[[["self"],[R[8]]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[8]]],[R[1]]]]],"p":[[4,"Lang"],[4,R[9]],[3,R[10]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);